// Generated by CoffeeScript 1.12.4
(function() {
  var CryptoAdapter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CryptoAdapter = (function() {
    function CryptoAdapter() {
      this._cryptoJsEnc = bind(this._cryptoJsEnc, this);
      this._hmacSha256_CryptoJs = bind(this._hmacSha256_CryptoJs, this);
      this._hmacSha256_Crypto = bind(this._hmacSha256_Crypto, this);
    }


    /*
    	## setModule
    	
    	`CryptoAdapter.setModule( tmpl, data )`
    	
    	The the crypto module and set the method `hmacSha256`
    	
    	@param { String } [cryptoModule=`crypto`] The module name of the used crypto module. Possible modules are the node internal "crypto" or the browser compatible ["crypto"](https://www.npmjs.com/package/crypto-js) module
    
    	@return { CryptoAdapter } A self reference
    	
    	@api private
     */

    CryptoAdapter.prototype.setModule = function(cryptoModule) {
      if (cryptoModule == null) {
        cryptoModule = "crypto";
      }
      this.crypto = require(cryptoModule);
      switch (cryptoModule) {
        case "crypto-js":
          this.hmacSha256 = this._hmacSha256_CryptoJs;
          break;
        default:
          this.hmacSha256 = this._hmacSha256_Crypto;
      }
      return this;
    };


    /*
    	## hmacSha256
    	
    	`CryptoAdapter.hmacSha256( secret, val[, secinp, out] )`
    	
    	calculate a hmac shah 256 hash
    	
    	@param { String } secret The secret to generate the hash
    	@param { String } val The value to generate the hash of
    	@param { String } [secinp="hex"] The input encoding of the secret. ( Enum: `hex`, `base64`, `utf8` )
    	@param { String } [out="hex"] The output encoding of the generated hash. ( Enum: `hex`, `base64`, `utf8` )
    
    	@return { String } The generated hash
    	
    	@api private
     */


    /*
    	## _hmacSha256_Crypto
    	
    	`CryptoAdapter._hmacSha256_Crypto( secret, val[, secinp, out] )`
    	
    	The node internal version of `hmacSha256` using the `crypto` module
    	
    	@param { String } secret The secret to generate the hash
    	@param { String } val The value to generate the hash of
    	@param { String } [secinp="hex"] The input encoding of the secret. ( Enum: `hex`, `base64`, `utf8` )
    	@param { String } [out="hex"] The output encoding of the generated hash. ( Enum: `hex`, `base64`, `utf8` )
    
    	@return { String } The generated hash
    	
    	@api private
     */

    CryptoAdapter.prototype._hmacSha256_Crypto = function(secret, val, secinp, out) {
      var _hash;
      if (secinp == null) {
        secinp = "hex";
      }
      if (out == null) {
        out = "hex";
      }
      _hash = this.crypto.createHmac('SHA256', new Buffer(secret, secinp)).update(val);
      return _hash.digest(out);
    };


    /*
    	## _hmacSha256_CryptoJs
    	
    	`CryptoAdapter._hmacSha256_CryptoJs( secret, val[, secinp, out] )`
    	
    	The browser version of `hmacSha256` using the `crypto-js` module
    	
    	@param { String } secret The secret to generate the hash
    	@param { String } val The value to generate the hash of
    	@param { String } [secinp="hex"] The input encoding of the secret. ( Enum: `hex`, `base64`, `utf8` )
    	@param { String } [out="hex"] The output encoding of the generated hash. ( Enum: `hex`, `base64`, `utf8` )
    
    	@return { String } The generated hash
    	
    	@api private
     */

    CryptoAdapter.prototype._hmacSha256_CryptoJs = function(secret, val, secinp, out) {
      var _hash, _outEnc, _secinpEnc;
      if (secinp == null) {
        secinp = "hex";
      }
      if (out == null) {
        out = "hex";
      }
      _secinpEnc = this._cryptoJsEnc(secinp);
      _outEnc = this._cryptoJsEnc(out);
      _hash = this.crypto.HmacSHA256(val, _secinpEnc.parse(secret));
      return _hash.toString(_outEnc);
    };


    /*
    	## _cryptoJsEnc
    	
    	`CryptoAdapter._cryptoJsEnc( enc )`
    	
    	`crypto-js` helper to grab the right encoder
    
    	@param { String } [enc="hex"] The encoding key. ( Enum: `hex`, `base64`, `utf8` )
    
    	@return { CryptoJs.Enc } A crypto-js encoder
    	
    	@api private
     */

    CryptoAdapter.prototype._cryptoJsEnc = function(enc) {
      if (enc == null) {
        enc = "hex";
      }
      switch (enc) {
        case "base64":
          return this.crypto.enc.Base64;
        case "hex":
          return this.crypto.enc.Hex;
        case "utf8":
          return this.crypto.enc.Utf8;
      }
    };

    return CryptoAdapter;

  })();

  module.exports = new CryptoAdapter();

}).call(this);
